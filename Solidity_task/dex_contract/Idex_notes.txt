Idex contract 

ecrecover : If you are a smart contract developer and you find yourself in need of recovering the signer address from signed messages in solidity youâ€™re able to do so using the 
global function ecrecover. 






details of line 146- 161 :

To find the trade volume then we need : the main function you should look for transactions of is the trade(uint256[8] tradeValues, address[4] tradeAddresses, uint8[2] v, bytes32[4] rs)

When a user makes or takes an order, this is the function that is called. Although keep in mind there are no formal transfers through the token or in ETH, the only transfers that occur 
are when a user deposits or withdraws funds.

\* amount is in amountBuy terms \*
\* tradeValues
    [0] amountBuy entire buy amount of order
    [1] amountSell entire sell amount of order
    [2] expires block where order expires
    [3] nonce of the maker order
    [4] amount of the order being bought for (must be \&lt;= amountBuy)
    [5] tradeNonce nonce of the taker
    [6] feeMake fee as a proportion of 1 ether, in units of tokenBuy
    [7] feeTake fee as a proportion of 1 ether, in units of tokenSell
  tradeAddressses
    [0] tokenBuy address of the token bought by the maker
    [1] tokenSell address of the token sold by the taker
    [2] maker account address of the maker
    [3] taker account address of the taker
  v
    [0] maker v from signature
    [1] taker v from signature
  rs
    [0] maker r from signature
    [1] maker s from signature
    [2] taker r from signature
    [3] taker s from signature
*/


line 174-180):

tokens[tokenBuy][taker] -= amount;
tokens[tokenBuy][maker] += safeMul(amount, (1 ether - feeMake)) / (1 ether);
tokens[tokenBuy][feeAccount] += safeMul(amount, feeMake) / (1 ether);
tokens[tokenSell][maker] -= safeMul(amountSell, amount) / amountBuy;
tokens[tokenSell][taker] += safeMul(safeMul(1 ether - feeTake, amountSell), amount) / amountBuy / (1 ether);
tokens[tokenSell][feeAccount] += safeMul(safeMul(feeTake, amountSell), amount) / amountBuy / (1 ether));





